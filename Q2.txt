2. Explain the following questions in your own words

A- What is the difference between some() and every()? Explain these using your own words.
-->
   Difference between some() and every():
a. The `some()` and `every()` methods are used on arrays in JavaScript to check  the elements against a condition.
   The main difference between them is how they evaluate the elements.
b.`some()` returns `true` if at least one array element satisfies the condition specified by the provided callback function. 
   It stops looping through the array after finding a matching element and immediately returns "true".
   If no element satisfies the condition, it will return "false".
c. On the other hand, `every()` returns `true` only if all elements of the array satisfy the condition. 
   It loops through each element of the array and checks if the condition is met for each element. 
   If an element does not meet the condition, it immediately returns "false". 
   It only returns "true" if all elements satisfy the condition.
In short, `some()` checks if at least one element meets the condition, while `every()` checks if all elements meet the condition.condition.

B- Explain the difference between the spread operator and the rest parameter in JavaScript.
-->
  The differences between the Spread operator and Rest parameters in JavaScript are:
a.Spread operator:
  The spread operator ("...") is used to extract elements from an array or object. 
  This allows us to distribute the elements of an array or the properties of an object to another array or object. 
  Expands an iterable elements into individual element.
* Example:
  const array = [1, 2, 3];
  const newArray = [...array]; // Creates a new array with elements [1, 2, 3]
b.Rest Parameter:
  The rest parameter ('...')  is used in function declarations to gather individual function arguments into an array. 
  It allows us to pass any number of arguments to a function, and they will be collected into an array.
* Example:
  function sum(...numbers) {
  return numbers.reduce((acc, curr) => acc + curr, 0);  
  }
  sum(1, 2, 3); // Returns 6, as the arguments are collected into an array [1, 2, 3]
In summary, the spread operator expands an iterable into individual elements, while the rest parameter collects individual function arguments into an array.
Difference between splice() and slice() for JavaScript arrays.

C- Explain the difference between splice() and slice() in JavaScript arrays.
-->
 Difference between splice() and slice() for JavaScript arrays.
a.Splice(): 
 The splice() method is used to modify an array by adding, removing, or replacing elements. 
 We can use this to modify the contents of the array by specifying the starting index, 
 the number of elements to remove (optional), and any elements to add (optional).
 Modifies the original array and returns the removed elements as a new array.
* Example usage of splice():
 const array = [1, 2, 3, 4, 5];
 const removedElements = array.splice(2, 2, 'a', 'b'); // Removes 2 elements starting from index 2 and adds 'a' and 'b'
 console.log(array); // Output: [1, 2, 'a', 'b', 5]
 console.log(removedElements); // Output: [3, 4]
b.Slice():
 slice(): The slice() method is used to create a new array containing part of the original array.
 it allows us to extract elements from an array without changing the original array. 
 Given a starting index (inclusive) and an ending index (exclusive), 
 slice() returns a new array containing the selected elements.
* Example usage of slice():
 const array = [1, 2, 3, 4, 5];
 const newArray = array.slice(1, 4); // Extracts elements starting from index 1 up to (but not including) index 4
 console.log(newArray); // Output: [2, 3, 4]
 console.log(array); // Output: [1, 2, 3, 4, 5] (original array remains unchanged)
In summary:
splice(): Modifies the original array, allows adding/replacing elements, and returns the removed elements.
slice(): Creates a new array, extracts a portion of the array, and does not modify the original.
In short, splice() changes the array, slice() creates a new array.

D-If you need to remove an object element from an array by its index, which method do you prefer to use: splice() or filter()? Explain.
-->
a. If i want to remove an object element from an array by its index, I will use the splice() method. because,
  using splice() method, i know the index of the element and i want to remove it. 
  It directly removes the element from the array at the specified index. 
  This method modifies the original array itself.
b. By using filter() meth as i want to remove elements based on a condition or specific criteria. 
  It creates a new array by filtering out elements that do not meet the provided condition. 
  This method does not modify the original array; it returns a new array with the filtered elements.
* In the case of removing an object element by its index, splice() is more straightforward and efficient. 
  It allows us to directly target and remove the element at the specific index. 
  On the other hand, using filter() would require additional logic to check the index, 
  making it less suitable and less efficient in this scenario.
In summary, if i need to remove an object element from an array by its index, 
it is preferable to use splice() due to its direct removal capability and efficiency in this specific situation.

E- Explain the difference between `null` and `undefined` in JavaScript.
-->
 The difference between null and undefined in JavaScript:
a. null: In JavaScript, null is a value that represents an intentional absence of an object's value.
   This is often used to indicate that a variable or property has intentionally no value or has been intentionally assigned a null value.
   It is a primitive value and can be explicitly assigned to a variable.
* Example usage of null:
 let myVariable = null; // Explicitly assigning null to a variable
b. Undefined: In JavaScript, undefined is a value that represents an uninitialized, missing, or undefined variable or property. 
   This indicates that a variable or property has been declared but not assigned a value. 
   undefined is the default value of variables that are declared but not explicitly assigned a different value.
* Example usage of undefined:
  let myVariable; // Declaring a variable without assigning a value, it will be undefined by default
  console.log(myVariable); // Output: undefined
  let myObject = {}; // Declaring an object without specifying a property
  console.log(myObject.property); // Output: undefined (property is not assigned a value)
In summary, null indicates the intentional absence of an object value, while undefined represents an uninitialized variable or undefined property.
null is assigned explicitly, while undefined is the default value for uninitialized variables or undefined properties.
They both indicate the absence of a meaningful value, but are used in different contexts in JavaScript.